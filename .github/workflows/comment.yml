name: Deploy to Heroku Review App

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  Review-App:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Wait for Heroku Review App Deployment
        id: wait
        run: |
          echo "Waiting for Heroku Review App deployment..."
          STATUS="pending"
          while [ "$STATUS" == "pending" ]; do
            sleep 30
            STATUS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits?per_page=1" | jq -r '.[0].commit.statuses_url' | xargs -n1 curl -s | jq -r '.[0].state')
          done

      - name: Retrieve App URL
        id: app_url
        run: |
          DEPLOYMENT_URL=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/deployments" | jq -r '.[0].payload.environment_url')

          echo "::set-env name=APP_URL::$DEPLOYMENT_URL"

      - name: Comment PR
        id: comment
        if: steps.wait.outputs.status == 'success'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request.number;
            const repository = context.repo;
            const app_url = process.env.APP_URL;
            const message = `Deployed to [Heroku Review App](${app_url}).`;

            // Check if there's an existing comment
            const { data: comments } = await github.rest.issues.listComments({
              ...repository,
              issue_number
            });

            // Find the comment from the workflow author
            const existingComment = comments.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('Deployed to Heroku Review App'));

            // Post a new comment or update the existing one
            if (existingComment) {
              await github.rest.issues.updateComment({
                ...repository,
                comment_id: existingComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                ...repository,
                issue_number,
                body: message
              });
            }
